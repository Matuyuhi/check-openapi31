/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.matuyuhi.apiclient.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import com.matuyuhi.apiclient.models.ListUsers200ResponseInner
import com.matuyuhi.apiclient.models.ShowUserById404Response

import com.squareup.moshi.Json

import com.matuyuhi.apiclient.infrastructure.ApiClient
import com.matuyuhi.apiclient.infrastructure.ApiResponse
import com.matuyuhi.apiclient.infrastructure.ClientException
import com.matuyuhi.apiclient.infrastructure.ClientError
import com.matuyuhi.apiclient.infrastructure.ServerException
import com.matuyuhi.apiclient.infrastructure.ServerError
import com.matuyuhi.apiclient.infrastructure.MultiValueMap
import com.matuyuhi.apiclient.infrastructure.PartConfig
import com.matuyuhi.apiclient.infrastructure.RequestConfig
import com.matuyuhi.apiclient.infrastructure.RequestMethod
import com.matuyuhi.apiclient.infrastructure.ResponseType
import com.matuyuhi.apiclient.infrastructure.Success
import com.matuyuhi.apiclient.infrastructure.toMultiValue

class UsersApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://api.example.com/v1")
        }
    }

    /**
     * POST /users
     * Create a user
     * 
     * @param listUsers200ResponseInner 
     * @return ListUsers200ResponseInner
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createUser(listUsers200ResponseInner: ListUsers200ResponseInner) : ListUsers200ResponseInner {
        val localVarResponse = createUserWithHttpInfo(listUsers200ResponseInner = listUsers200ResponseInner)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ListUsers200ResponseInner
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /users
     * Create a user
     * 
     * @param listUsers200ResponseInner 
     * @return ApiResponse<ListUsers200ResponseInner?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createUserWithHttpInfo(listUsers200ResponseInner: ListUsers200ResponseInner) : ApiResponse<ListUsers200ResponseInner?> {
        val localVariableConfig = createUserRequestConfig(listUsers200ResponseInner = listUsers200ResponseInner)

        return request<ListUsers200ResponseInner, ListUsers200ResponseInner>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createUser
     *
     * @param listUsers200ResponseInner 
     * @return RequestConfig
     */
    fun createUserRequestConfig(listUsers200ResponseInner: ListUsers200ResponseInner) : RequestConfig<ListUsers200ResponseInner> {
        val localVariableBody = listUsers200ResponseInner
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/users",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /users
     * List all users
     * 
     * @return kotlin.collections.List<ListUsers200ResponseInner>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listUsers() : kotlin.collections.List<ListUsers200ResponseInner> {
        val localVarResponse = listUsersWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<ListUsers200ResponseInner>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /users
     * List all users
     * 
     * @return ApiResponse<kotlin.collections.List<ListUsers200ResponseInner>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listUsersWithHttpInfo() : ApiResponse<kotlin.collections.List<ListUsers200ResponseInner>?> {
        val localVariableConfig = listUsersRequestConfig()

        return request<Unit, kotlin.collections.List<ListUsers200ResponseInner>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listUsers
     *
     * @return RequestConfig
     */
    fun listUsersRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /users/{userId}
     * Info for a specific user
     * 
     * @param userId The id of the user to retrieve
     * @return ListUsers200ResponseInner
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun showUserById(userId: kotlin.String) : ListUsers200ResponseInner {
        val localVarResponse = showUserByIdWithHttpInfo(userId = userId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ListUsers200ResponseInner
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /users/{userId}
     * Info for a specific user
     * 
     * @param userId The id of the user to retrieve
     * @return ApiResponse<ListUsers200ResponseInner?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun showUserByIdWithHttpInfo(userId: kotlin.String) : ApiResponse<ListUsers200ResponseInner?> {
        val localVariableConfig = showUserByIdRequestConfig(userId = userId)

        return request<Unit, ListUsers200ResponseInner>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation showUserById
     *
     * @param userId The id of the user to retrieve
     * @return RequestConfig
     */
    fun showUserByIdRequestConfig(userId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/{userId}".replace("{"+"userId"+"}", encodeURIComponent(userId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
